<templateSet group="Myweb">
  <template name="h" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;zh-CN&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;utf-8&quot;&gt;&#10;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot;  content=&quot;IE=edge，chrome=1&quot;&gt;&#10;    &lt;meta name=&quot;author&quot; content=&quot;买文博&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;style&gt;&#10;&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;&lt;script&gt;&#10;&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="快速文本结构V0.2" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="db" value="var mongoose = require('mongoose');&#10;mongoose.Promise = Promise;&#10;mongoose.connect(&quot;mongodb://127.0.0.1/student&quot;);// 连接数据库，建立持久连接&#10;const db = mongoose.connection;&#10;db.on(&quot;open&quot;,  function(){&#10;    console.log(&quot;打开数据库成功！&quot;);&#10;});&#10;var Student = mongoose.model('集合名称', {//构造函数&#10;    name: String,&#10;    isMale: Boolean,&#10;    age: Number,&#10;    phone: Number,&#10;    email: String,&#10;    createTime: String,&#10;    beizhu: String,&#10;    ip: String&#10;})&#10;" description="连接本地数据库" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="art" value="   var  template = require('art-template');&#10;   template.config('cache', false)&#10;   app.engine('html', template.__express)&#10;   app.set('view engine', 'html')" description="Art-template模板" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="cookieparser" value="var cookieParser = require('cookie-parser')&#10;&#10;app.use(cookieParser());//初始化cookieParser" description="cookie-parser" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ie" value="&lt;meta http-equiv=&quot;X-UA-Compatible&quot;  content=&quot;IE=edge，chrome=1&quot;&gt;" description="IE以高版本模式渲染，这以最新的IE版本模式来显示网页。" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="view" value="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt;" description="(禁止缩放，适用于移动端)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="angular" value="angular.module('myApp', [])&#10;  // 模块和控制器&#10;  .run([&quot;$rootScope&quot;, function($rootScope) {&#10;    console.log('启动成功！')&#10;  }])&#10;  .controller(&quot;mainController&quot;, [&quot;$rootScope&quot;, &quot;$scope&quot;, function($rootScope, $scope) {&#10;    // $rootScope&#10;    // $scope&#10;    console.log($rootScope);&#10;    console.log($scope);&#10;  }]);&#10;" description="angular基本结构" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="express" value="/*EXPRESS服务器模板创建日期2017年09月25日16:13:14 Myweb*/&#10;const express = require('express');&#10;const app = express();&#10;const c = require('child_process');&#10;&#10;app.use(express.static('www'));&#10;&#10;app.listen(3000, function () {&#10;    console.log('服务器启动成功！');&#10;    c.exec('start http://127.0.0.1:3000');&#10;    c.exec('open http://127.0.0.1:3000')&#10;});&#10;&#10;" description="express服务器模板" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nunjucks" value="//nunjucks模板引擎&#10;var nunjucks=require('nunjucks');//引入nunjucks&#10;nunjucks.configure('views', {//指定文件目录&#10;    autoescape: true,&#10;    express: app&#10;});" description="nunjucks模板引擎" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="atmjs" value="/*&#10; *@require xx.css&#10; */" description="ATM环境下js引入css" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ip" value="var os=require('os');&#10;var getIPAddress = function () {&#10;  var ifaces = os.networkInterfaces();&#10;  var ip = '';&#10;  for (var dev in ifaces) {&#10;    ifaces[dev].forEach(function (details) {&#10;      if (ip === '' &amp;&amp; details.family === 'IPv4' &amp;&amp; !details.internal) {&#10;        ip = details.address;&#10;        return;&#10;      }&#10;    });&#10;  }&#10;  return ip || &quot;127.0.0.1&quot;;&#10;};" description="nodeJs获取ip的函数" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="mail" value="var email = require('nodemailer');&#10;var transporter = email.createTransport({&#10;    service: 'qq',&#10;    auth: {&#10;        user: '867785789@qq.com',&#10;        pass: 'zhiraijhtovobbih' //授权码,通过QQ获取&#10;    }&#10;});&#10;var mailOptions = {&#10;    from: '867785789@qq.com', // 发送者&#10;    to: 'mai852852@126.com', // 接收者,可以同时发送多个,以逗号隔开&#10;    subject: '密码重置', // 标题&#10;    html: '&lt;h2 style=&quot;color:red&quot;&gt;这是一封测试邮件&lt;/h2&gt;'&#10;};&#10;&#10;transporter.sendMail(mailOptions, function (err, info) {&#10;    if (err) {&#10;        console.log(err);&#10;        return;&#10;    }&#10;&#10;    console.log('发送成功');&#10;    res.send('发送成功');&#10;});" description="nodejs服务器发送邮件" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="mobile" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;zh-CN&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;utf-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;&gt;&#10;    &lt;!--忽略号码识别--&gt;&#10;    &lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;/&gt;&#10;    &lt;!--忽略邮箱识别--&gt;&#10;    &lt;meta name=&quot;format-detection&quot; content=&quot;email=no&quot;/&gt;&#10;    &lt;!--苹果--&gt;&#10;    &lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot;&gt;&#10;    &lt;meta content=&quot;black&quot; name=&quot;apple-mobile-web-app-status-bar-style&quot;&gt;&#10;&#10;    &lt;meta name=&quot;author&quot; content=&quot;买文博&quot;&gt;&#10;    &lt;title&gt;Document&lt;/title&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            font-family: Helvetica;&#10;        }&#10;        /*一般的字体大小 使用rem*/&#10;        html{font-size:10px}&#10;        @media screen and (min-width:321px) and (max-width:375px){html{font-size:11px}}&#10;        @media screen and (min-width:376px) and (max-width:414px){html{font-size:12px}}&#10;        @media screen and (min-width:415px) and (max-width:639px){html{font-size:15px}}&#10;        @media screen and (min-width:640px) and (max-width:719px){html{font-size:20px}}&#10;        @media screen and (min-width:720px) and (max-width:749px){html{font-size:22.5px}}&#10;        @media screen and (min-width:750px) and (max-width:799px){html{font-size:23.5px}}&#10;        @media screen and (min-width:800px){html{font-size:25px}}&#10;        /*IOS兼容输入样式*/&#10;        a,button,input,textarea{-webkit-tap-highlight-color: rgba(0,0,0,0);}&#10;        /*安卓兼容输入*/&#10;        button,input,textarea{&#10;            -webkit-tap-highlight-color: rgba(0,0,0,0);&#10;        -webkit-user-modify:read-write-plaintext-only;&#10;        }&#10;        /*表单样式重置*/&#10;        .css{-webkit-appearance:none;}&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;&lt;script&gt;&#10; $(document).ready(&#10;            //阻止页面滚动&#10;            function () {&#10;                document.addEventListener('touchmove', function (e) {&#10;                    e.preventDefault();&#10;                });&#10;            }&#10;    );&#10;    $(function () {&#10;        // 解决iOS10的Safari下Meta设置user-scalable=no无效&#10;        window.onload = function () {&#10;            document.addEventListener('touchstart', function (event) {&#10;                if (event.touches.length &gt; 1) {&#10;                    event.preventDefault();&#10;                }&#10;            });&#10;            var lastTouchEnd = 0;&#10;            document.addEventListener('touchend', function (event) {&#10;                var now = (new Date()).getTime();&#10;                if (now - lastTouchEnd &lt;= 300) {&#10;                    event.preventDefault();&#10;                }&#10;                lastTouchEnd = now;&#10;            }, false)&#10;        }&#10;    });&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="移动端开发模板V0.1" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="@" value="@media only screen and (min-width: 1440px)and (max-width: 1920px) {&#10;    body{&#10;        background-color: #fff;&#10;    }&#10;}" description="媒体查询" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
    </context>
  </template>
  <template name="seo" value="&lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;&#10;&lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;" description="SEO标签" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="live" value="//自动监听刷新node服务器 2017-12-07 Myweb&#10;const express = require('express');&#10;const app = express();&#10;const fs = require('fs');&#10;const c = require('child_process');&#10;const port = 3000;&#10;const watcher = require('filewatcher');&#10;const nunjucks = require('nunjucks');&#10;const watch = watcher();&#10;const ws = require('nodejs-websocket');&#10;const bodyParser = require('body-parser');&#10;app.use(bodyParser.urlencoded({extended: false}));&#10;nunjucks.configure('html', {&#10;    autoescape: true,&#10;    express: app,&#10;    noCache: process.env.NODE_ENV !== 'production'&#10;});&#10;&#10;const os = require('os');&#10;const getIPAddress = function () {&#10;    var ifaces = os.networkInterfaces();&#10;    var ip = '';&#10;    for (var dev in ifaces) {&#10;        ifaces[dev].forEach(function (details) {&#10;            if (ip === '' &amp;&amp; details.family === 'IPv4' &amp;&amp; !details.internal) {&#10;                ip = details.address;&#10;                return;&#10;            }&#10;        });&#10;    }&#10;    return ip || &quot;127.0.0.1&quot;;&#10;};&#10;app.use(express.static('src'));&#10;//工程目录内部路由处理&#10;&#10;app.get('*', function (req, res) {&#10;    var dirList = [];&#10;    var url = decodeURI(req.url.substr(1));&#10;    var dir = fs.readdirSync('./html');&#10;&#10;    dir.forEach(function (e, i, a) {&#10;        if (e.indexOf('.html') &gt; -1) {&#10;            dirList.push(e);&#10;        }&#10;    });&#10;&#10;   if (dirList.indexOf(url) &gt; -1) {&#10;        res.render(url, {&#10;            title:url&#10;        });&#10;    }&#10;    else {&#10;        if (url == '') {&#10;            res.render('./index.html');&#10;        }&#10;        else {&#10;            res.render('system/404.html')&#10;        }&#10;    }&#10;});&#10;//启动提示&#10;app.listen(port, function () {&#10;    const ip = getIPAddress();&#10;    console.log('服务器启动成功！\n地址:' + ip + ':' + port);&#10;    c.exec('start http://' + ip+':'+ port);&#10;    c.exec('open http://' + ip+':'+ port);&#10;});&#10;//文件变动监测&#10;&#10;const watchHtml = fs.readdirSync('./html/');&#10;const watchSrc = fs.readdirSync('./src/');&#10;&#10;watchHtml.forEach(function (e) {&#10;    watch.add('./html/' + e);&#10;});&#10;watchSrc.forEach(function (e) {&#10;    watch.add('./src/' + e);&#10;});&#10;&#10;&#10;watch.on('change', function (file, stat) {&#10;    if (!server.connections.length) {&#10;        console.log('警告：没有活动页面或页面未连接！');&#10;        c.exec('open http://127.0.0.1:3000');&#10;    }&#10;    else {&#10;        if (file.indexOf('css') &gt; -1) {&#10;            broadcast(server, 'css');&#10;            console.log('修改CSS文件，样式表已更新', new Date().toLocaleTimeString());&#10;        }&#10;        else {&#10;            broadcast(server, 'reload');&#10;            console.log('修改HTML文件，页面重加载', new Date().toLocaleTimeString());&#10;        }&#10;        if (!stat) console.log('文件已移除');&#10;&#10;    }&#10;&#10;});&#10;const server = ws.createServer(function (conn) {&#10;    conn.on('text', function (msg) {&#10;        console.log('页面：&quot;' + msg + '&quot;进入监测范围');&#10;    });&#10;    conn.on(&quot;close&quot;, function (code, reason) {&#10;    });&#10;    conn.on('error', function (err) {&#10;        console.log('Chrome客户端离开了');&#10;    })&#10;&#10;}).listen(3001);&#10;&#10;function broadcast(server, msg) {&#10;    server.connections.forEach(function (conn) {&#10;        conn.sendText(msg);&#10;&#10;    })&#10;}&#10;app.post('/addmessage.html',function (req,res) {&#10;   console.log('收到表单请求');&#10;   console.log(req.body);&#10;   res.send('{&quot;status&quot;:&quot;true&quot;}')&#10;});" description="  自动刷新node服务器" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="adapter" value="/* &#10;Adapter v3.0.0&#10;手机wap页面retina适配，基于rem,使用方法：设计稿如果是750 不需要更改。如果是其他尺寸的设计稿，改动设计稿的宽度即可。&#10;2017.07.05&#10;*/&#10;function baseFont() {&#10;    var designWidth = 750;//设计稿宽度,可以自由更改&#10;    var baseNum = designWidth / 100;&#10;    var docEl = document.documentElement;&#10;&#10;    var dpr = window.devicePixelRatio || 1;&#10;    var scale = 1 / dpr;&#10;    var innerWidth = document.documentElement.getBoundingClientRect().width || window.innerWidth;&#10;    if (innerWidth / dpr &gt; designWidth) {&#10;        innerWidth = designWidth * dpr&#10;    }//开发模式下电脑端显示750px&#10;&#10;    if (docEl.className == 'noRetina') {//不需要高清适配的地方不适配（在不需要适配页面的html标签上加 class=&quot;noRetina&quot;）&#10;        docEl.style.fontSize = (innerWidth / baseNum) + 'px';&#10;    } else {&#10;        docEl.style.fontSize = (innerWidth * dpr / baseNum) + 'px';&#10;        docEl.querySelector('meta[name=&quot;viewport&quot;]').setAttribute('content', 'initial-scale=' + scale + ',width=device-width,maximum-scale=' + scale + ',user-scalable=no');&#10;    }&#10;}&#10;&#10;baseFont();" description="REM布局用的JS,自动计算所缩放和根字号大小" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="refresh" value="/**&#10; * 配合node服务器端自动刷新的JS 需要在页面中引用，当文件发生改变页面会自动刷新。2017-12-07 Myweb&#10;* */&#10;if ('WebSocket' in window) {&#10;    (function () {&#10;        function refreshCSS() {&#10;            var sheets = [].slice.call(document.getElementsByTagName(&quot;link&quot;));&#10;            var head = document.getElementsByTagName(&quot;head&quot;)[0];&#10;            for (var i = 0; i &lt; sheets.length; ++i) {&#10;                var elem = sheets[i];&#10;                head.removeChild(elem);&#10;                var rel = elem.rel;&#10;                if (elem.href &amp;&amp; typeof rel != &quot;string&quot; || rel.length == 0 || rel.toLowerCase() ==&#10;                    &quot;stylesheet&quot;) {&#10;                    var url = elem.href.replace(/(&amp;|\?)_cacheOverride=\d+/, '');&#10;                    elem.href = url + (url.indexOf('?') &gt;= 0 ? '&amp;' : '?') + '_cacheOverride=' + (new Date()&#10;                        .valueOf());&#10;                }&#10;                head.appendChild(elem);&#10;            }&#10;        }&#10;        var socket = new WebSocket('ws://127.0.0.1:3001');&#10;        socket.onmessage = function (msg) {&#10;            if (msg.data == 'reload') window.location.reload();&#10;            else if (msg.data == 'css') refreshCSS();&#10;        };&#10;        socket.onerror = function() {&#10;           console.log('发生了错误，页面刷新可能不及时');&#10;        };&#10;        socket.onopen=function () {&#10;            socket.send(document.title);&#10;        };&#10;&#10;        if (sessionStorage &amp;&amp; !sessionStorage.getItem('FirstTime')) {&#10;            console.log('实时刷新已激活.');&#10;            sessionStorage.setItem('FirstTime', true);&#10;        }&#10;    })();&#10;} else {&#10;    console.error('浏览器版本过低，不支持websocket!');&#10;}&#10;" description="监听文件改变自动刷新脚本" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>